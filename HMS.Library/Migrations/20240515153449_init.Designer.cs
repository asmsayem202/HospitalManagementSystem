// <auto-generated />
using System;
using HMS.Library.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HMS.Library.Migrations
{
    [DbContext(typeof(HMSdb))]
    [Migration("20240515153449_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HMS.Library.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdmissionType")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int?>("EmergencyID")
                        .HasColumnType("int");

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("AdmissionId");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("EmergencyID");

                    b.HasIndex("NurseID");

                    b.HasIndex("RoomID");

                    b.HasIndex("WardID");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("HMS.Library.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HMS.Library.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentTypeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HMS.Library.Models.AppointmentPrescribe", b =>
                {
                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowupNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentID");

                    b.ToTable("AppointmentPrescribes");
                });

            modelBuilder.Entity("HMS.Library.Models.AppointmentPrescribeDetails", b =>
                {
                    b.Property<int>("AppointmentPrescribeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentPrescribeDetailsId"));

                    b.Property<int>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("Dosgae")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentPrescribeDetailsId");

                    b.HasIndex("AppointmentID");

                    b.ToTable("AppointmentPrescribeDetails");
                });

            modelBuilder.Entity("HMS.Library.Models.Billing", b =>
                {
                    b.Property<int>("BillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BalanceDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BedCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ConsultancyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MedicineFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OT_Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OthersFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal?>("ServiceCharge")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillingId");

                    b.HasIndex("PatientID");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("HMS.Library.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "Medicine"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "ENT"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "Child"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Name = "Gynecology"
                        },
                        new
                        {
                            DepartmentId = 5,
                            Name = "BurnUnit"
                        },
                        new
                        {
                            DepartmentId = 6,
                            Name = "Cardiology"
                        },
                        new
                        {
                            DepartmentId = 7,
                            Name = "Orthopedic"
                        },
                        new
                        {
                            DepartmentId = 8,
                            Name = "Surgical"
                        },
                        new
                        {
                            DepartmentId = 9,
                            Name = "Neurology"
                        },
                        new
                        {
                            DepartmentId = 10,
                            Name = "Dental"
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Discharge", b =>
                {
                    b.Property<int>("DischargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DischargeId"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DischargeId");

                    b.HasIndex("AdmissionID");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("HMS.Library.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            ContactNo = "+880-181-2225587",
                            DepartmentID = 1,
                            Email = "farhana@example.com",
                            Name = "Dr. Farhana Rahman",
                            Schedule = "Sat-Thu 10-1",
                            Shift = 0,
                            Specialization = "Gynecologist"
                        },
                        new
                        {
                            DoctorId = 2,
                            ContactNo = "+880-171-1234567",
                            DepartmentID = 1,
                            Email = "mohammad.rahman@example.com",
                            Name = "Dr. Mohammad Rahman",
                            Schedule = "Sun-Thu 9-1",
                            Shift = 1,
                            Specialization = "Cardiologist"
                        },
                        new
                        {
                            DoctorId = 3,
                            ContactNo = "+880-191-9876543",
                            DepartmentID = 2,
                            Email = "fatima.ahmed@example.com",
                            Name = "Dr. Fatima Ahmed",
                            Schedule = "Sun-Thu 10-2",
                            Shift = 2,
                            Specialization = "Dermatologist"
                        },
                        new
                        {
                            DoctorId = 4,
                            ContactNo = "+880-181-8765432",
                            DepartmentID = 2,
                            Email = "ayesha.khan@example.com",
                            Name = "Dr. Ayesha Khan",
                            Schedule = "Sun-Thu 8-12",
                            Shift = 0,
                            Specialization = "Neurologist"
                        },
                        new
                        {
                            DoctorId = 5,
                            ContactNo = "+880-171-2345678",
                            DepartmentID = 3,
                            Email = "nazia.islam@example.com",
                            Name = "Dr. Nazia Islam",
                            Schedule = "Sat-Thu 9-1",
                            Shift = 1,
                            Specialization = "Obstetrician"
                        },
                        new
                        {
                            DoctorId = 6,
                            ContactNo = "+880-191-3456789",
                            DepartmentID = 3,
                            Email = "kamal.hossain@example.com",
                            Name = "Dr. Kamal Hossain",
                            Schedule = "Sat-Thu 10-2",
                            Shift = 2,
                            Specialization = "Endocrinologist"
                        },
                        new
                        {
                            DoctorId = 7,
                            ContactNo = "+880-181-4567890",
                            DepartmentID = 4,
                            Email = "sabrina.yasmin@example.com",
                            Name = "Dr. Sabrina Yasmin",
                            Schedule = "Sat-Thu 8-12",
                            Shift = 0,
                            Specialization = "Ophthalmologist"
                        },
                        new
                        {
                            DoctorId = 8,
                            ContactNo = "+880-171-5678901",
                            DepartmentID = 4,
                            Email = "rahman.chowdhury@example.com",
                            Name = "Dr. Rahman Chowdhury",
                            Schedule = "Sat-Thu 9-1",
                            Shift = 1,
                            Specialization = "Orthodontist"
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Emergency", b =>
                {
                    b.Property<int>("EmergencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmergencyId"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmergencyDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmergencyId");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Emergencies");
                });

            modelBuilder.Entity("HMS.Library.Models.EmergencyPrescribe", b =>
                {
                    b.Property<int?>("EmergencyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowupNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmergencyID");

                    b.ToTable("EmergencyPrescribes");
                });

            modelBuilder.Entity("HMS.Library.Models.EmergencyPrescribeDetails", b =>
                {
                    b.Property<int>("EmergencyPrescribeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmergencyPrescribeDetailsId"));

                    b.Property<string>("Dosgae")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmergencyID")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmergencyPrescribeDetailsId");

                    b.HasIndex("EmergencyID");

                    b.ToTable("EmergencyPrescribeDetails");
                });

            modelBuilder.Entity("HMS.Library.Models.InventoryItem", b =>
                {
                    b.Property<int>("InventoryItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("InventoryItemId");

                    b.HasIndex("SupplierID");

                    b.ToTable("InventoryItems");

                    b.HasData(
                        new
                        {
                            InventoryItemId = 1,
                            Category = "latex",
                            Name = "Bandages",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 2
                        },
                        new
                        {
                            InventoryItemId = 3,
                            Category = "Normal",
                            Name = "Gauze pads",
                            Price = 10000m,
                            Quantity = 500,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryItemId = 4,
                            Category = "10ml",
                            Name = "Syringes",
                            Price = 1000m,
                            Quantity = 50,
                            SupplierID = 1
                        },
                        new
                        {
                            InventoryItemId = 5,
                            Category = "40mm",
                            Name = "Needles",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 3
                        },
                        new
                        {
                            InventoryItemId = 6,
                            Category = "Peripheral IV",
                            Name = "IV catheters",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 4
                        },
                        new
                        {
                            InventoryItemId = 7,
                            Category = "Normal",
                            Name = "Surgical masks",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 2
                        },
                        new
                        {
                            InventoryItemId = 8,
                            Category = "Antiseptics & Disinfectants",
                            Name = "Alcohol swabs",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 5
                        },
                        new
                        {
                            InventoryItemId = 9,
                            Category = "Normal",
                            Name = "Bandages",
                            Price = 100m,
                            Quantity = 50,
                            SupplierID = 6
                        },
                        new
                        {
                            InventoryItemId = 10,
                            Category = "general",
                            Name = "Bandages",
                            Price = 10000m,
                            Quantity = 50,
                            SupplierID = 6
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NurseId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("NurseId");

                    b.HasIndex("WardID");

                    b.ToTable("Nurses");

                    b.HasData(
                        new
                        {
                            NurseId = 1,
                            ContactNo = "0123456789",
                            Name = "Lutfarnahar",
                            Shift = 0,
                            WardID = 1
                        },
                        new
                        {
                            NurseId = 2,
                            ContactNo = "0123222789",
                            Name = "Nahar",
                            Shift = 1,
                            WardID = 1
                        },
                        new
                        {
                            NurseId = 3,
                            ContactNo = "0123336789",
                            Name = "Ayesha",
                            Shift = 2,
                            WardID = 1
                        },
                        new
                        {
                            NurseId = 4,
                            ContactNo = "0123456744",
                            Name = "Jamila",
                            Shift = 0,
                            WardID = 2
                        },
                        new
                        {
                            NurseId = 5,
                            ContactNo = "0123456775",
                            Name = "Runa khatun",
                            Shift = 1,
                            WardID = 2
                        },
                        new
                        {
                            NurseId = 6,
                            ContactNo = "0123456766",
                            Name = "Nasrin",
                            Shift = 2,
                            WardID = 2
                        },
                        new
                        {
                            NurseId = 7,
                            ContactNo = "0123456663",
                            Name = "Arifa",
                            Shift = 0,
                            WardID = 7
                        },
                        new
                        {
                            NurseId = 8,
                            ContactNo = "0123458879",
                            Name = "Maria ",
                            Shift = 1,
                            WardID = 8
                        },
                        new
                        {
                            NurseId = 9,
                            ContactNo = "0123452299",
                            Name = "Sanjida",
                            Shift = 2,
                            WardID = 9
                        },
                        new
                        {
                            NurseId = 10,
                            ContactNo = "0123412389",
                            Name = "Riya ",
                            Shift = 0,
                            WardID = 10
                        },
                        new
                        {
                            NurseId = 11,
                            ContactNo = "0123789789",
                            Name = "Priya",
                            Shift = 1,
                            WardID = 1
                        },
                        new
                        {
                            NurseId = 12,
                            ContactNo = "0123455669",
                            Name = "Puja Shill",
                            Shift = 2,
                            WardID = 2
                        },
                        new
                        {
                            NurseId = 13,
                            ContactNo = "0188456789",
                            Name = "Ratna khatun",
                            Shift = 0,
                            WardID = 3
                        },
                        new
                        {
                            NurseId = 14,
                            ContactNo = "01643456789",
                            Name = "Tuli ",
                            Shift = 1,
                            WardID = 4
                        },
                        new
                        {
                            NurseId = 15,
                            ContactNo = "0198456789",
                            Name = "Tasnia",
                            Shift = 2,
                            WardID = 5
                        },
                        new
                        {
                            NurseId = 16,
                            ContactNo = "0155456789",
                            Name = "Urmi",
                            Shift = 0,
                            WardID = 6
                        },
                        new
                        {
                            NurseId = 17,
                            ContactNo = "0155456689",
                            Name = "Rahima",
                            Shift = 1,
                            WardID = 7
                        },
                        new
                        {
                            NurseId = 18,
                            ContactNo = "0177756789",
                            Name = "Amena",
                            Shift = 2,
                            WardID = 8
                        },
                        new
                        {
                            NurseId = 19,
                            ContactNo = "018976789",
                            Name = "Latifa Akter",
                            Shift = 0,
                            WardID = 9
                        },
                        new
                        {
                            NurseId = 20,
                            ContactNo = "012655569",
                            Name = "Farin akter",
                            Shift = 1,
                            WardID = 10
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BloodTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("BloodTypeID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Address = "123 ABC Street, Dhaka",
                            Age = 28,
                            BloodTypeID = 1,
                            ContactNo = "+880-171-1234567",
                            Email = "ayesha.rahman@example.com",
                            Gender = 2,
                            InsuranceInformation = "Policy #123456",
                            Name = "Ayesha Rahman",
                            Status = "Active"
                        },
                        new
                        {
                            PatientId = 2,
                            Address = "456 XYZ Road, Chittagong",
                            Age = 30,
                            BloodTypeID = 2,
                            ContactNo = "+880-191-2345678",
                            Email = "mohammad.ali@example.com",
                            Gender = 1,
                            InsuranceInformation = "Policy #789012",
                            Name = "Mohammad Ali",
                            Status = "Active"
                        },
                        new
                        {
                            PatientId = 3,
                            Address = "789 LMN Avenue, Sylhet",
                            Age = 32,
                            BloodTypeID = 3,
                            ContactNo = "+880-181-3456789",
                            Email = "fatima.khan@example.com",
                            Gender = 2,
                            InsuranceInformation = "Policy #345678",
                            Name = "Fatima Khan",
                            Status = "Active"
                        },
                        new
                        {
                            PatientId = 4,
                            Address = "321 PQR Lane, Rajshahi",
                            Age = 26,
                            BloodTypeID = 1,
                            ContactNo = "+880-171-4567890",
                            Email = "rahim.khan@example.com",
                            Gender = 1,
                            InsuranceInformation = "Policy #234567",
                            Name = "Rahim Khan",
                            Status = "Active"
                        },
                        new
                        {
                            PatientId = 5,
                            Address = "789 XYZ Street, Khulna",
                            Age = 33,
                            BloodTypeID = 2,
                            ContactNo = "+880-191-5678901",
                            Email = "nusrat.jahan@example.com",
                            Gender = 2,
                            InsuranceInformation = "Policy #890123",
                            Name = "Nusrat Jahan",
                            Status = "Active"
                        },
                        new
                        {
                            PatientId = 6,
                            Address = "147 LMN Road, Barishal",
                            Age = 29,
                            BloodTypeID = 3,
                            ContactNo = "+880-181-6789012",
                            Email = "kamal.hossain@example.com",
                            Gender = 1,
                            InsuranceInformation = "Policy #456789",
                            Name = "Kamal Hossain",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ReportAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("PatientID");

                    b.HasIndex("ReportTypeID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("HMS.Library.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WardID")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("WardID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            RoomNumber = "A-101",
                            Status = "Standard Room",
                            WardID = 1
                        },
                        new
                        {
                            RoomId = 2,
                            RoomNumber = "B-102",
                            Status = "General Room ",
                            WardID = 1
                        },
                        new
                        {
                            RoomId = 3,
                            RoomNumber = "C-103",
                            Status = "VIP Room ",
                            WardID = 1
                        },
                        new
                        {
                            RoomId = 4,
                            RoomNumber = "A-104",
                            Status = " Standard Room",
                            WardID = 2
                        },
                        new
                        {
                            RoomId = 5,
                            RoomNumber = "B-105",
                            Status = "General Room  ",
                            WardID = 2
                        },
                        new
                        {
                            RoomId = 6,
                            RoomNumber = "C-106",
                            Status = " VIP Room",
                            WardID = 2
                        },
                        new
                        {
                            RoomId = 7,
                            RoomNumber = "A-107",
                            Status = "Standard Room",
                            WardID = 3
                        },
                        new
                        {
                            RoomId = 8,
                            RoomNumber = "B-108",
                            Status = " General Room ",
                            WardID = 3
                        },
                        new
                        {
                            RoomId = 9,
                            RoomNumber = "C-109",
                            Status = "VIP Room",
                            WardID = 3
                        },
                        new
                        {
                            RoomId = 10,
                            RoomNumber = "A-110",
                            Status = " Standard Room",
                            WardID = 4
                        },
                        new
                        {
                            RoomId = 11,
                            RoomNumber = "B-111",
                            Status = "General Room ",
                            WardID = 4
                        },
                        new
                        {
                            RoomId = 12,
                            RoomNumber = "C-112",
                            Status = " VIP Room",
                            WardID = 4
                        },
                        new
                        {
                            RoomId = 13,
                            RoomNumber = "A-201",
                            Status = "Standard Room",
                            WardID = 5
                        },
                        new
                        {
                            RoomId = 14,
                            RoomNumber = "B-202",
                            Status = " General Room",
                            WardID = 5
                        },
                        new
                        {
                            RoomId = 15,
                            RoomNumber = "C-203",
                            Status = "VIP Room ",
                            WardID = 5
                        },
                        new
                        {
                            RoomId = 16,
                            RoomNumber = "A-204",
                            Status = " Standard Room",
                            WardID = 6
                        },
                        new
                        {
                            RoomId = 17,
                            RoomNumber = "B-205",
                            Status = "General Room",
                            WardID = 6
                        },
                        new
                        {
                            RoomId = 18,
                            RoomNumber = "C-206",
                            Status = " VIP Room ",
                            WardID = 6
                        },
                        new
                        {
                            RoomId = 19,
                            RoomNumber = "A-207",
                            Status = "Standard Room",
                            WardID = 7
                        },
                        new
                        {
                            RoomId = 20,
                            RoomNumber = "B-208",
                            Status = " General Room",
                            WardID = 7
                        },
                        new
                        {
                            RoomId = 21,
                            RoomNumber = "A-209",
                            Status = "Standard Room",
                            WardID = 8
                        },
                        new
                        {
                            RoomId = 22,
                            RoomNumber = "B-210",
                            Status = " General Room",
                            WardID = 8
                        },
                        new
                        {
                            RoomId = 23,
                            RoomNumber = "A-211",
                            Status = "Standard Room",
                            WardID = 9
                        },
                        new
                        {
                            RoomId = 24,
                            RoomNumber = "B-212",
                            Status = " General Room",
                            WardID = 10
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StaffId");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Address = "Dhaka",
                            ContactNo = "01823459999",
                            Designation = "Hospital Administrator",
                            Email = "karim@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Karim"
                        },
                        new
                        {
                            StaffId = 2,
                            Address = "ctg",
                            ContactNo = "01823459977",
                            Designation = "Chief Medical Officer (CMO)",
                            Email = "rahim@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Rahim"
                        },
                        new
                        {
                            StaffId = 3,
                            Address = "Dhaka",
                            ContactNo = "01623459978",
                            Designation = "Chief Nursing Officer (CNO)",
                            Email = "jannat@gmail.com",
                            Shift = 0,
                            StaffName = "Mss.Jannat"
                        },
                        new
                        {
                            StaffId = 4,
                            Address = "ctg",
                            ContactNo = "01523459977",
                            Designation = "Director of Operations",
                            Email = "maruf@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Maruf"
                        },
                        new
                        {
                            StaffId = 5,
                            Address = "ctg",
                            ContactNo = "01823456645",
                            Designation = "Finance Manager",
                            Email = "krim45@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Krim"
                        },
                        new
                        {
                            StaffId = 6,
                            Address = "Dhaka",
                            ContactNo = "01823459977",
                            Designation = "Human Resources Manager:",
                            Email = "hasib@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Hasib"
                        },
                        new
                        {
                            StaffId = 7,
                            Address = "ctg",
                            ContactNo = "01523459990",
                            Designation = "Information Technology (IT) Manager:",
                            Email = "aziz90@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Aziz"
                        },
                        new
                        {
                            StaffId = 8,
                            Address = "ctg",
                            ContactNo = "01823459778",
                            Designation = "Quality Improvement Manager",
                            Email = "rashed78@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Rashed"
                        },
                        new
                        {
                            StaffId = 9,
                            Address = "Dhaka",
                            ContactNo = "01823459989",
                            Designation = "Medical Records Manager",
                            Email = "habib@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Habib"
                        },
                        new
                        {
                            StaffId = 10,
                            Address = "ctg",
                            ContactNo = "01823459999",
                            Designation = "Supply Chain Manager",
                            Email = "adil@gmail.com",
                            Shift = 0,
                            StaffName = "Md.Adil"
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Address = "ctg",
                            ContactNo = "01823456612",
                            Email = "timelyproductltd.@gmail.com",
                            Name = "Timely Product Ltd."
                        },
                        new
                        {
                            SupplierId = 2,
                            Address = "ctg",
                            ContactNo = "01823456622",
                            Email = " crifooIntertradeltd.@gmail.com",
                            Name = " Crifoo Intertrade Ltd."
                        },
                        new
                        {
                            SupplierId = 3,
                            Address = "ctg",
                            ContactNo = "01523457712",
                            Email = " Care71@gmail.com",
                            Name = " 71 Care"
                        },
                        new
                        {
                            SupplierId = 4,
                            Address = "Dhaka",
                            ContactNo = "01823456999",
                            Email = "continentalsurgicalhouse@gmail.com",
                            Name = "Continental Surgical House"
                        },
                        new
                        {
                            SupplierId = 5,
                            Address = "Dhaka",
                            ContactNo = "01823459999",
                            Email = "anifcohealthcare@gmail.com",
                            Name = "Anifco Healthcare"
                        },
                        new
                        {
                            SupplierId = 6,
                            Address = "ctg",
                            ContactNo = "01823456777",
                            Email = "bmabazar777@gmail.com",
                            Name = "BMA Bazar"
                        });
                });

            modelBuilder.Entity("HMS.Library.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RefTypeID")
                        .HasColumnType("int");

                    b.Property<string>("RefTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HMS.Library.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardId = 1,
                            Name = "Medicine ward "
                        },
                        new
                        {
                            WardId = 2,
                            Name = "ENT ward "
                        },
                        new
                        {
                            WardId = 3,
                            Name = "Child ward "
                        },
                        new
                        {
                            WardId = 4,
                            Name = "Gynecology Ward "
                        },
                        new
                        {
                            WardId = 5,
                            Name = "Burn Unit Ward"
                        },
                        new
                        {
                            WardId = 6,
                            Name = "Cardiology Ward"
                        },
                        new
                        {
                            WardId = 7,
                            Name = "Orthopedic Ward "
                        },
                        new
                        {
                            WardId = 8,
                            Name = "Surgical Ward "
                        },
                        new
                        {
                            WardId = 9,
                            Name = "Neurology Ward"
                        },
                        new
                        {
                            WardId = 10,
                            Name = "Dental Ward"
                        });
                });

            modelBuilder.Entity("HMS.Library.Types.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentTypeId");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            AppointmentTypeId = 1,
                            Name = "General Consultation"
                        },
                        new
                        {
                            AppointmentTypeId = 2,
                            Name = "Specialist Consultation"
                        },
                        new
                        {
                            AppointmentTypeId = 3,
                            Name = "Follow-up Appointment"
                        },
                        new
                        {
                            AppointmentTypeId = 4,
                            Name = "Maternity Appointment"
                        },
                        new
                        {
                            AppointmentTypeId = 5,
                            Name = "Vaccination/Immunization"
                        },
                        new
                        {
                            AppointmentTypeId = 6,
                            Name = "Surgical Consultation"
                        },
                        new
                        {
                            AppointmentTypeId = 7,
                            Name = "Emergency Consultation"
                        },
                        new
                        {
                            AppointmentTypeId = 8,
                            Name = "Nutritional Counseling"
                        },
                        new
                        {
                            AppointmentTypeId = 9,
                            Name = "Lab Work or Blood Tests"
                        });
                });

            modelBuilder.Entity("HMS.Library.Types.BloodType", b =>
                {
                    b.Property<int>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BloodTypeId");

                    b.ToTable("BloodTypes");

                    b.HasData(
                        new
                        {
                            BloodTypeId = 1,
                            Name = "A+"
                        },
                        new
                        {
                            BloodTypeId = 2,
                            Name = "A-"
                        },
                        new
                        {
                            BloodTypeId = 3,
                            Name = "AB+"
                        },
                        new
                        {
                            BloodTypeId = 4,
                            Name = "AB-"
                        },
                        new
                        {
                            BloodTypeId = 5,
                            Name = "B+"
                        },
                        new
                        {
                            BloodTypeId = 6,
                            Name = "B-"
                        },
                        new
                        {
                            BloodTypeId = 7,
                            Name = "O+"
                        },
                        new
                        {
                            BloodTypeId = 8,
                            Name = "O-"
                        });
                });

            modelBuilder.Entity("HMS.Library.Types.ReportType", b =>
                {
                    b.Property<int>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportTypes");

                    b.HasData(
                        new
                        {
                            ReportTypeId = 1,
                            Name = "Discharge Summary"
                        },
                        new
                        {
                            ReportTypeId = 2,
                            Name = "Pathology Report"
                        },
                        new
                        {
                            ReportTypeId = 3,
                            Name = "Laboratory Report"
                        },
                        new
                        {
                            ReportTypeId = 4,
                            Name = "Consultation Report"
                        },
                        new
                        {
                            ReportTypeId = 5,
                            Name = "Anesthesia Report"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HMS.Library.Models.Admission", b =>
                {
                    b.HasOne("HMS.Library.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("HMS.Library.Models.Emergency", "Emergency")
                        .WithMany()
                        .HasForeignKey("EmergencyID");

                    b.HasOne("HMS.Library.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Room", "Room")
                        .WithMany("Admissions")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Emergency");

                    b.Navigation("Nurse");

                    b.Navigation("Room");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HMS.Library.Models.Appointment", b =>
                {
                    b.HasOne("HMS.Library.Types.AppointmentType", "AppointmentType")
                        .WithMany("Appointment")
                        .HasForeignKey("AppointmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMS.Library.Models.AppointmentPrescribe", b =>
                {
                    b.HasOne("HMS.Library.Models.Appointment", "Appointment")
                        .WithOne("AppointmentPrescribe")
                        .HasForeignKey("HMS.Library.Models.AppointmentPrescribe", "AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HMS.Library.Models.AppointmentPrescribeDetails", b =>
                {
                    b.HasOne("HMS.Library.Models.AppointmentPrescribe", "AppointmentPrescribe")
                        .WithMany("AppointmentPrescribeDetails")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentPrescribe");
                });

            modelBuilder.Entity("HMS.Library.Models.Billing", b =>
                {
                    b.HasOne("HMS.Library.Models.Patient", "Patient")
                        .WithMany("Billing")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMS.Library.Models.Discharge", b =>
                {
                    b.HasOne("HMS.Library.Models.Admission", "Admission")
                        .WithMany()
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("HMS.Library.Models.Doctor", b =>
                {
                    b.HasOne("HMS.Library.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentID");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HMS.Library.Models.Emergency", b =>
                {
                    b.HasOne("HMS.Library.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.Patient", "Patient")
                        .WithMany("Emergency")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMS.Library.Models.EmergencyPrescribe", b =>
                {
                    b.HasOne("HMS.Library.Models.Emergency", "Emergency")
                        .WithOne("EmergencyPrescribe")
                        .HasForeignKey("HMS.Library.Models.EmergencyPrescribe", "EmergencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emergency");
                });

            modelBuilder.Entity("HMS.Library.Models.EmergencyPrescribeDetails", b =>
                {
                    b.HasOne("HMS.Library.Models.EmergencyPrescribe", "EmergencyPrescribe")
                        .WithMany("EmergencyPrescribeDetails")
                        .HasForeignKey("EmergencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmergencyPrescribe");
                });

            modelBuilder.Entity("HMS.Library.Models.InventoryItem", b =>
                {
                    b.HasOne("HMS.Library.Models.Supplier", "Supplier")
                        .WithMany("InventoryItems")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("HMS.Library.Models.Nurse", b =>
                {
                    b.HasOne("HMS.Library.Models.Ward", "Ward")
                        .WithMany("Nurses")
                        .HasForeignKey("WardID");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("HMS.Library.Models.Patient", b =>
                {
                    b.HasOne("HMS.Library.Types.BloodType", "BloodType")
                        .WithMany("Patient")
                        .HasForeignKey("BloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("HMS.Library.Models.Report", b =>
                {
                    b.HasOne("HMS.Library.Models.Patient", "Patient")
                        .WithMany("Report")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Types.ReportType", "ReportType")
                        .WithMany("Report")
                        .HasForeignKey("ReportTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("ReportType");
                });

            modelBuilder.Entity("HMS.Library.Models.Room", b =>
                {
                    b.HasOne("HMS.Library.Models.Ward", "Ward")
                        .WithMany("Rooms")
                        .HasForeignKey("WardID");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HMS.Library.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HMS.Library.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HMS.Library.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HMS.Library.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HMS.Library.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentPrescribe");
                });

            modelBuilder.Entity("HMS.Library.Models.AppointmentPrescribe", b =>
                {
                    b.Navigation("AppointmentPrescribeDetails");
                });

            modelBuilder.Entity("HMS.Library.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HMS.Library.Models.Emergency", b =>
                {
                    b.Navigation("EmergencyPrescribe");
                });

            modelBuilder.Entity("HMS.Library.Models.EmergencyPrescribe", b =>
                {
                    b.Navigation("EmergencyPrescribeDetails");
                });

            modelBuilder.Entity("HMS.Library.Models.Patient", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Billing");

                    b.Navigation("Emergency");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("HMS.Library.Models.Room", b =>
                {
                    b.Navigation("Admissions");
                });

            modelBuilder.Entity("HMS.Library.Models.Supplier", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("HMS.Library.Models.Ward", b =>
                {
                    b.Navigation("Nurses");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HMS.Library.Types.AppointmentType", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HMS.Library.Types.BloodType", b =>
                {
                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HMS.Library.Types.ReportType", b =>
                {
                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
